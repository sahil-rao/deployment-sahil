description "Redis Server"
author "Prithviraj Pandian <prithviraj.pandian@cloudera.com>"

# Run when local FS becomes available
start on local-filesystems
stop on shutdown

# Daemonize is set to yes in redis.conf so that redis can write its pid to /var/run (for monit)
expect fork

# Respawn unless redis dies 10 times in 5 seconds
respawn
respawn limit 10 5

# Run redis as correct user, instead of root
# Will not work on Ubuntu 12
setuid redis
setgid redis

# If this file exists, we have successfully loaded from a s3 backup on startup
env BACKUP_LOADED_COOKIE="/var/lib/redis/backup-loaded-cookie"


pre-start script

    # Wait for user data script to create /etc/navoptenv.json
    count=1
    while [ ! -f /etc/navoptenv.json ]; do
    	if [ $count -gt 300 ]; then
    	  echo "Out of wait for /etv/navoptenv.json"
    	  exit 1
    	else
    	  sleep 1
    	  count=$((count+1))
    	fi
    done

    . /usr/local/bin/navoptenv.sh
    # If a backup file is provided in the userdata json  on startup, load from the backup
    if [ "x$BACKUP_FILE" != "xnull" ] && [ "x$BACKUP_FILE" != "x" ] && [ ! -f "$BACKUP_LOADED_COOKIE" ]; then
        /usr/local/bin/aws s3 cp $BACKUP_FILE /var/lib/redis/dump.rdb
        # We don't want to load the same backup file on subsequent restarts
        touch $BACKUP_LOADED_COOKIE
        chmod 400 $BACKUP_LOADED_COOKIE
    fi
    
end script


post-start script

    /usr/local/bin/wait_for_redis_to_load.sh

    # If we are not new, we need to find a master to become a slave of
    new=$(/usr/local/bin/new_set.sh)
    if [ "x$new" = "xno" ]; then
        masterip=$(/usr/local/bin/get_master_ip.sh)
        # Slave myself to this master
        redis-cli slaveof $masterip 6379
    fi

    # Set up DNS registration crontab now that we've been identified as a master or slave.
    # This has to happen after we check our replication, else there is a race condition (because Redis always boots as master)
    (crontab -l || true; echo "* * * * * /bin/bash /usr/local/bin/register_host.sh >>/var/log/register_host.log 2>&1") 2>&1 | grep -v "no crontab" | sort | uniq | crontab -
    # Set up hourly backup crontab
    (crontab -l || true; echo "*/30 * * * * /bin/bash /usr/local/bin/do_backup.sh >>/var/log/do_backup.log 2>&1") 2>&1 | grep -v "no crontab" | sort | uniq | crontab -

end script


pre-stop script

    # Clean up our crontab
    crontab -r
    redis-cli shutdown save

end script


exec /usr/bin/redis-server /etc/redis/local/redis.conf
