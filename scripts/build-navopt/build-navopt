#!/usr/bin/env python

import argparse
import getpass
import os
import shutil
import subprocess
import sys
from collections import OrderedDict

CONFIG = {
    'dev': {
        'account': '128669107540',
        'aws_profile': 'navopt_dev',
        'region': 'us-west-2',
        'bucket': 'navopt-dev-deployment-bucket',
        'cluster': 'navopt-dev',
    },
    'alpha': {
        'account': '892272719698',
        'aws_profile': 'navopt_alpha',
        'region': 'us-west-1',
        'bucket': 'navopt-alpha-deployment-bucket',
        'cluster': 'navopt-alpha',
    },
    'stage': {
        'account': '001209911431',
        'aws_profile': 'navopt_stage',
        'region': 'us-west-2',
        'bucket': 'navopt-stage-deployment-bucket',
        'cluster': 'navopt-stage',
    },
    'prod': {
        'account': '892272719698',
        'aws_profile': 'navopt_prod',
        'region': 'us-west-2',
        'bucket': 'navopt-prod-deployment-bucket',
        'cluster': 'navopt-prod',
    },
}

# List out the services and their artifacts.
SERVICES = OrderedDict([
    ('deployment',
        [
            'Baaz-DataAcquisition-Service.tar.gz',
            'Baaz-Compile-Service.tar.gz',
            'Baaz-Analytics-Service.tar.gz',
            'Baaz-API-Service.tar.gz'
        ]
     ),
    ('UI',
        [
            'xplain.io.tar.gz',
            'optimizer_api.io.tar.gz',
            'xplain_dashboard.tar.gz',
            'optimizer_admin.io.tar.gz',
        ]
     ),
    ('analytics',
        [
            'Baaz-Analytics.tar.gz',
        ]
     ),
    ('compiler',
        [
            'Baaz-Compiler.tar.gz',
        ]
     ),
    ('graph',
        [
            'flightpath-deployment.tar.gz',
            'regression-deployment.tar.gz',
        ]
     )])

# List services that go in Docker images.
DOCKER_IMAGES = {
    'navopt-pyservices': [
        'deployment',
        'graph',
        'analytics'
    ],
    'navopt-javaservices': [
        'compiler'
    ]
}

DEFAULT_GITHUB_PROJECT = 'git@github.com:baazdata'


def run_command(args, cmd, **kwargs):
    if args.verbose:
        print '+', ' '.join(cmd)

    if not args.dry_run:
        subprocess.check_call(cmd, **kwargs)


def checkout_repo(args, service):
    """
    Check out the service repo into a cache.
    """

    repo_base = args.repo
    if not repo_base.endswith('/'):
        repo_base += '/'

    repo_url = '{}{}.git'.format(repo_base, service)
    repo_dir = os.path.join('.gitcache', service)

    if os.path.exists(repo_dir):
        print '--- updating', repo_url

        cmd = [
            'git',
            '-C', repo_dir,
            'remote',
            'set-url',
            'origin',
            repo_url,
        ]
        run_command(args, cmd)

        cmd = [
            'git',
            '-C', repo_dir,
            'remote',
            'update',
            'origin',
        ]
        run_command(args, cmd)
    else:
        print '--- cloning', repo_url

        cmd = [
            'git',
            'clone',
            '--mirror',
            repo_url,
            repo_dir,
        ]
        run_command(args, cmd)


def build_service(args, service):
    """
    Build the service in a docker container.
    """

    checkout_repo(args, service)

    print '--- building', service

    cmd = [
        'docker',
        'build',
        '-t',
        'build-navopt',
        'scripts',
    ]
    run_command(args, cmd)

    # Run the docker build.
    cmd = [
        'docker',
        'run',
        '-v', os.path.expanduser('~/.m2:/root/.m2'),
        '-v', '{}/.gitcache:/gitcache'.format(os.getcwd()),
        '-v', '{}/.node_modules:/node_modules'.format(os.getcwd()),
        '-v', '{}/target:/target'.format(os.getcwd()),
        '-v', '{}/scripts:/scripts'.format(os.getcwd()),
        '-t', 'build-navopt',
        '/scripts/build-{}.sh'.format(service),
        args.branch,
    ]
    run_command(args, cmd)


def build_services(args):
    if not args.build:
        return

    for service in args.services:
        build_service(args, service)


def upload_service(args, service, target_bucket):
    """
    Upload the service tarballs.
    """

    for tarball in SERVICES[service]:
        src = os.path.join('target', tarball)

        if not args.dry_run and not os.path.exists(src):
            raise Exception('`{}` does not exist'.format(src))

        dst = 's3://{}/{}'.format(target_bucket, tarball)

        print '--- uploading', src, 'to', dst
        cmd = [
            'aws',
            '--profile', CONFIG[args.env]['aws_profile'],
            's3',
            'cp',
            src,
            dst,
        ]
        run_command(args, cmd)


def prompt(msg, assume_yes=None):
    if assume_yes is not None:
        return assume_yes

    while True:
        response = raw_input(msg).lower()
        if response in ('yes', 'y'):
            return True
        elif response in ('no', 'n'):
            return False


def upload_services(args, target_bucket):
    if not args.upload or args.assume_yes is False:
        return

    if args.assume_yes is None:
        print
        print '-' * 78
        print
        print \
            'Are you sure you want to upload the following services?', \
            ' '.join(sorted(args.services))

        if not prompt('[yes/no]: ', args.assume_yes):
            return

    for service in args.services:
        upload_service(args, service, target_bucket)


def build_docker_image(args, image):
    # Ensure all build artifacts are in place, else
    # the Docker image build will fail.
    for service in args.services:
        for artifact in SERVICES[service]:
            shutil.copy(
                'target/{}'.format(artifact),
                '{0}/{1}'.format(image, artifact))

    print '*'*70
    print 'Building {} Docker image'.format(image)
    print '*'*70

    cmd = [
        'docker',
        'build',
        '-t',
        image,
        image,
    ]
    run_command(args, cmd)


def build_docker_images(args):
    for image in args.docker_images:
        build_docker_image(args, image)
        push_docker_image(args, image)


def push_docker_image(args, image):
    if not args.registry_endpoint:
        return

    if args.assume_yes is None:
        print
        print '-' * 78
        print
        print \
            'Are you sure you want to push the following image?', \
            image

        if not prompt('[yes/no]: ', args.assume_yes):
            return

    # Log into AWS Region.
    # The aws command returns the 'docker login' command.
    # It does not actually run it, so we capture the output
    # of 'aws login' and feed that to run_command().
    cmd = [
        'aws',
        '--profile', CONFIG[args.env]['aws_profile'],
        'ecr',
        'get-login',
        '--region', CONFIG[args.env]['region'],
    ]
    docker_login_cmd = subprocess.check_output(cmd).strip().split(' ')
    run_command(args, docker_login_cmd)

    docker_endpoint = '{}.dkr.ecr.{}.amazonaws.com'.format(
        CONFIG[args.env]['account'],
        CONFIG[args.env]['region'],
    )

    # Tag the image
    cmd = [
        'docker',
        'tag',
        '{0}'.format(image),
        '{0}/{1}:latest'.format(
            docker_endpoint,
            image),
    ]
    run_command(args, cmd)

    # Push the image
    cmd = [
        'docker',
        'push',
        '{0}/{1}'.format(docker_endpoint, image),
    ]
    run_command(args, cmd)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-v', '--verbose',
        default=False,
        action='store_true',
        help='Print extra debug info')
    parser.add_argument(
        '-n', '--no',
        default=None,
        dest='assume_yes',
        action='store_false',
        help='Answer yes to any questions')
    parser.add_argument(
        '-y', '--yes',
        default=None,
        dest='assume_yes',
        action='store_true',
        help='Answer yes to any questions')
    parser.add_argument(
        '--dry-run',
        default=False,
        action='store_true',
        help='Do not actually run any commands')
    parser.add_argument(
        '--repo',
        default=DEFAULT_GITHUB_PROJECT,
        help='github project to clone from (default {})'.format(
            DEFAULT_GITHUB_PROJECT,
        ))
    parser.add_argument(
        '--env',
        required=True,
        help='Build for this environment')
    parser.add_argument(
        '--release',
        default=False,
        action='store_true',
        help='build a release candidate')
    parser.add_argument(
        '--branch',
        default='master',
        help='which branch to build (default master)')
    parser.add_argument(
        '--target_branch',
        default=None,
        help='which branch to build (defaults to `--branch` value)')
    parser.add_argument(
        '--target_path',
        help='upload artifacts to this bucket (default $USERNAME-$BRANCH)')
    parser.add_argument(
        '--no-build',
        dest='build',
        default=True,
        action='store_false',
        help='do not build artifacts')
    parser.add_argument(
        '--no-upload',
        dest='upload',
        default=True,
        action='store_false',
        help='do not upload artifacts to S3')
    parser.add_argument(
        'services',
        default=SERVICES.keys(),
        nargs='*',
        help='which services to build')
    parser.add_argument(
        '--build-docker-images',
        nargs='?',
        default=None,
        const='all',
        dest='docker_images',
        choices=DOCKER_IMAGES.keys() + ['all'],
        help=(
            'Build specified Docker images. Comma-separated. '
            'Possible values: {}, all'.format(', '.join(DOCKER_IMAGES.keys())))
        )

    return parser.parse_args()


def main():
    args = parse_args()

    ############################################################################
    # Validate arguments

    if not args.branch:
        print >> sys.stderr, 'build branch is empty'
        return 1

    # Use the build branch if the target branch is not specified.
    target_branch = args.target_branch
    if target_branch is None:
        target_branch = args.branch

    if not target_branch:
        print >> sys.stderr, 'target branch is empty'
        return 1

    target_path = args.target_path
    if target_path is None:
        target_path = '{}/{}'.format(getpass.getuser(), target_branch)

    if not target_path:
        print >> sys.stderr, 'target path is empty'
        return 1

    target_bucket = CONFIG[args.env]['bucket']
    if not args.release:
        target_bucket = os.path.join(target_bucket, target_path)

    # Make sure services are known
    for service in args.services:
        if service not in SERVICES:
            print >> sys.stderr, 'unknown service:', service
            return 1

    if args.docker_images:
        # Convert human-friendly list of Docker images
        #  to Python list
        if 'all' in args.docker_images:
            args.docker_images = DOCKER_IMAGES.keys()
        else:
            args.docker_images = args.docker_images.split(',')

        # The javaservices Docker image uses pyservices as its base
        if 'javaservices' in args.docker_images and \
                'pyservices' not in args.docker_images:
            args.docker_images.append('pyservices')

        # Ensure appropriate packages are built for each image.  i.e. The Docker
        # build will fail if it's missing the build artifact for a package.
        for image in args.docker_images:
            for service in DOCKER_IMAGES[image]:
                args.services.append(service)
        # Remove duplicate services.
        args.services = list(set(args.services))

    ############################################################################
    # Do the build

    if not os.path.exists('.gitcache'):
        os.makedirs('.gitcache')

    if not os.path.exists('.node_modules'):
        os.makedirs('.node_modules')

    if not os.path.exists('target'):
        os.makedirs('target')

    build_services(args)
    upload_services(args, target_bucket)

    if args.docker_images:
        build_docker_images(args)


if __name__ == '__main__':
    sys.exit(main())
